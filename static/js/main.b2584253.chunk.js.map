{"version":3,"sources":["index.js"],"names":["colors","arrOutOfBounds","arr","i","length","Square","props","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","style","background","value","Board","index","row","_this","this","map","squares","renderSquare","_this2","rows","renderRow","React","Component","Game","_this3","Object","C_Users_Rxtje_Desktop_React_tetris_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","C_Users_Rxtje_Desktop_React_tetris_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","C_Users_Rxtje_Desktop_React_tetris_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","loop","tetris","blocks","_this4","j","setState","gameLoop","setInterval","tick","startLoop","clearInterval","endLoop","x","y","isEmpty","slice","assign","canMove","applyTetris","min","max","Math","floor","random","spawnTetris","moveTetris","_this5","onClick","onNewGame","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b2584253.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nconst colors = [\"white\", \"red\", \"green\", \"blue\", \"cyan\", \"magenta\", \"yellow\"];\r\n\r\nfunction getRndInteger(min, max) {\r\n  return Math.floor(Math.random() * (max - min) ) + min;\r\n}\r\nfunction arrOutOfBounds(arr, i) {\r\n  return i < 0 || i >= arr.length;\r\n}\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"square\" style={{background: colors[props.value]}}></button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(index) {\r\n    return <Square value={index}/>;\r\n  }\r\n  renderRow(row) {\r\n    return (\r\n      <div className=\"board-row\">\r\n        {row.map(squares => this.renderSquare(squares))}\r\n      </div>\r\n    );\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.rows.map(row => this.renderRow(row))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        loop: false,\r\n        rows: [\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        ],\r\n        tetris: {\r\n          blocks: [],\r\n          value: 0,\r\n        },\r\n    }\r\n  }\r\n\r\n  startLoop() {\r\n    const rows = this.state.rows;\r\n    for (let i = 0; i < rows.length; ++i) {\r\n      for (let j = 0; j < rows[i].length; ++j) {\r\n        rows[i][j] = 0;\r\n      }\r\n    }\r\n    this.setState({ rows: rows, });\r\n    this.gameLoop = setInterval(() => this.tick(), 10);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({loop : true});\r\n    this.startLoop();\r\n  };\r\n\r\n  endLoop() {\r\n    this.setState({loop : false});\r\n    clearInterval(this.gameLoop);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.endLoop();\r\n  }\r\n\r\n  onNewGame() {\r\n    if (this.loop) {\r\n      this.endLoop();\r\n    }\r\n    this.startLoop();\r\n  }\r\n\r\n  applyTetris(rows, blocks, value) {\r\n    for (let i = 0; i < blocks.length; ++i) {\r\n      rows[blocks[i][0]][blocks[i][1]] = value;\r\n    }\r\n  }\r\n\r\n  isEmpty(rows, x, y) {\r\n    return rows[x][y] === 0;\r\n  }\r\n  canMove(rows, blocks, x, y) {\r\n    for (let i = 0; i < blocks.length; ++i) {\r\n      if (arrOutOfBounds(rows, blocks[i][0] + x) ||\r\n          arrOutOfBounds(rows[blocks[i][0] + x], blocks[i][1] + y) ||\r\n          !this.isEmpty(rows, blocks[i][0] + x, blocks[i][1] + y)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  moveTetris(x, y) {\r\n    const rows = this.state.rows.slice();\r\n    const tetris = Object.assign({}, this.state.tetris);\r\n    if (this.canMove(rows, tetris.blocks, x, y)) {\r\n      this.applyTetris(rows, tetris.blocks, 0);\r\n\r\n      for (let i = 0; i < tetris.blocks.length; ++i) {\r\n        tetris.blocks[i][0] += x;\r\n        tetris.blocks[i][1] += y;\r\n      }\r\n      this.applyTetris(rows, tetris.blocks, tetris.value);\r\n\r\n      this.setState({\r\n        rows: rows,\r\n        tetris: tetris,\r\n      });\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  spawnTetris() {\r\n    const tetris = {\r\n      blocks: [[0, 3], [0, 4], [0, 5], [0, 6]],\r\n      value: getRndInteger(1, colors.length),\r\n    };\r\n    const rows = this.state.rows.slice();\r\n\r\n    if (this.canMove(rows, tetris.blocks, 0, 0)) {\r\n      this.applyTetris(rows, tetris.blocks, tetris.value);\r\n      this.setState({\r\n        rows: rows,\r\n        tetris: tetris,\r\n      });\r\n    }\r\n    else {\r\n      this.endLoop();\r\n      //alert(\"lose\");\r\n    }\r\n  }\r\n\r\n  tick() {\r\n    if (this.state.tetris.blocks.length === 0) {\r\n      this.spawnTetris();\r\n    }\r\n    else {\r\n      if (!this.moveTetris(1, 0))\r\n        this.spawnTetris();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board rows={this.state.rows}/>\r\n          <button onClick={() => this.onNewGame()}>New Game</button>\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{}</div>\r\n          <ol>{}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}