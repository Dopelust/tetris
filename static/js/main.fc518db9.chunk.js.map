{"version":3,"sources":["index.js"],"names":["colors","arrOutOfBounds","arr","i","length","Square","props","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","style","background","value","Board","row","rowIndex","key","map","square","index","_this","this","rows","renderRow","React","Component","ScoreCounter","_this2","Object","C_Users_Rxtje_Desktop_React_tetris_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","C_Users_Rxtje_Desktop_React_tetris_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","C_Users_Rxtje_Desktop_React_tetris_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","scoreCount","nextProps","_this3","lerp","setInterval","lerpScore","score","clearInterval","setState","toFixed","slice","Game","_this4","speed","tetris","blocks","clearRow","_this5","gameLoop","setTimeout","tick","clearTimeout","endLoop","clearBoard","onLoop","x","y","j","isRepeat","isEmpty","assign","canMove","applyTetris","shiftBlocks","onMoveTetris","checkBoard","spawnTetris","Array","fill","checkRow","shiftRows","px","py","size","rotated","getRotatedTetrisLeft","unclipTetris","min","max","Math","floor","random","moveTetris","event","rotateTetris","moveTetrisRecursive","target","_this6","onKeyDown","handleKeyPress","onClick","onNewGame","type","direction","onChange","onSpeedChange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fc518db9.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nconst colors = [\"white\", \"red\", \"green\", \"blue\", \"cyan\", \"magenta\", \"yellow\"];\r\n\r\nfunction getRndInteger(min, max) {\r\n  return Math.floor(Math.random() * (max - min) ) + min;\r\n}\r\nfunction arrOutOfBounds(arr, i) {\r\n  return i < 0 || i >= arr.length;\r\n}\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"square\" style={{background: colors[props.value]}}></button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n  renderRow(row, rowIndex) {\r\n    return (\r\n      <div className=\"board-row\" key={rowIndex}>\r\n        {row.map((square, index) => <Square value={square} key={index}/>)}\r\n      </div>\r\n    );\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.rows.map((row, rowIndex) => this.renderRow(row, rowIndex))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst scorePadding = \"000000000\";\r\nclass ScoreCounter extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      scoreCount: 0,\r\n    }\r\n  }\r\n  componentWillReceiveProps(nextProps) {\r\n    if (!this.lerp)\r\n      this.lerp = setInterval(() => this.lerpScore(), 1000/60)\r\n  }\r\n  lerpScore() {\r\n    let score = this.state.scoreCount;\r\n\r\n    score += (this.props.score - score) / 3 + 1;\r\n    if (score >= this.props.score) {\r\n      score = this.props.score;\r\n      clearInterval(this.lerp);\r\n      this.lerp = null;\r\n    }\r\n\r\n    this.setState({ scoreCount:score });\r\n  }\r\n  render() {\r\n    return (\r\n        <div className=\"score\">\r\n          {(scorePadding + this.state.scoreCount.toFixed(0)).slice(-scorePadding.length)}\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        score: 0,\r\n        speed: 100,\r\n        rows: [\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        ],\r\n        tetris: {\r\n          blocks: [],\r\n          value: 0,\r\n        },\r\n    }\r\n  }\r\n\r\n  clearRow(row) {\r\n    for (let i = 0; i < row.length; ++i) {\r\n      row[i] = 0;\r\n    }\r\n  }\r\n  clearBoard() {\r\n    const rows = this.state.rows;\r\n    for (let i = 0; i < rows.length; ++i) {\r\n      this.clearRow(rows[i]);\r\n    }\r\n    const tetris = this.state.tetris;\r\n    tetris.blocks = [];\r\n    this.setState({ rows: rows, tetris: tetris });\r\n  }\r\n\r\n  onLoop() {\r\n    this.gameLoop = setTimeout(() => this.tick(), this.state.speed);\r\n  }\r\n  endLoop() {\r\n    if (this.gameLoop) {\r\n      clearTimeout(this.gameLoop);\r\n      this.gameLoop = null;\r\n    }\r\n  }\r\n  overwriteLoop() {\r\n    this.endLoop();\r\n    this.tick();\r\n  }\r\n  componentDidMount() {\r\n    this.clearBoard();\r\n    this.onLoop();\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    this.endLoop();\r\n  }\r\n\r\n  onNewGame() {\r\n    this.endLoop();\r\n    this.clearBoard();\r\n    this.onLoop();\r\n  }\r\n\r\n  applyTetris(rows, blocks, value) {\r\n    for (let i = 0; i < blocks.length; ++i) {\r\n      rows[blocks[i][0]][blocks[i][1]] = value;\r\n    }\r\n  }\r\n\r\n  isEmpty(rows, x, y) {\r\n    return rows[x][y] === 0;\r\n  }\r\n  isRepeat(blocks, i, x, y) {\r\n    for (let j = 0; j < blocks.length; ++j) {\r\n      if (i === j)\r\n        continue;\r\n      if (blocks[i][0] + x === blocks[j][0] && blocks[i][1] + y === blocks[j][1])\r\n        return true;\r\n    }\r\n    return false;\r\n  }\r\n  canMove(rows, blocks, x, y) {\r\n    for (let i = 0; i < blocks.length; ++i) {\r\n      if (arrOutOfBounds(rows, blocks[i][0] + x))\r\n        return 0;\r\n      else if (arrOutOfBounds(rows[blocks[i][0] + x], blocks[i][1] + y))\r\n        return 2;\r\n      else if (!this.isRepeat(blocks, i, x, y) && !this.isEmpty(rows, blocks[i][0] + x, blocks[i][1] + y))\r\n        return y === 0 ? -1 : 2;\r\n    }\r\n    return 1;\r\n  }\r\n\r\n  onMoveTetris(x, y) {\r\n    const rows = this.state.rows.slice();\r\n    const tetris = Object.assign({}, this.state.tetris);\r\n    switch (this.canMove(rows, tetris.blocks, x, y)) {\r\n      case 2:\r\n        y = 0; //fallthrough\r\n      case 1:\r\n        this.applyTetris(rows, tetris.blocks, 0);\r\n        this.shiftBlocks(tetris.blocks, x, y);\r\n        this.applyTetris(rows, tetris.blocks, tetris.value);\r\n\r\n        this.setState({\r\n          rows: rows,\r\n          tetris: tetris,\r\n        });\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n  moveTetris(x, y) {\r\n    if (!this.onMoveTetris(x, y)) {\r\n      this.checkBoard();\r\n      this.spawnTetris();\r\n    }\r\n  }\r\n  moveTetrisRecursive(x, y) {\r\n    while (this.onMoveTetris(x, y)) {}\r\n  }\r\n\r\n  checkRow(row) {\r\n    for (let i = 0; i < row.length; ++i) {\r\n      if (row[i] === 0)\r\n        return false;\r\n    }\r\n    return true;\r\n  }\r\n  shiftRows(rows, i) {\r\n    for (let j = i; j >= 0; --j) {\r\n      rows[j] = j > 0 ? rows[j - 1].slice() : new Array(10).fill(0);\r\n    }\r\n  }\r\n\r\n  checkBoard() {\r\n    const rows = this.state.rows.slice();\r\n    let score = this.state.score;\r\n    for (let i = rows.length - 1; i >= 0; --i) {\r\n      if (this.checkRow(rows[i])) {\r\n        score += 1000;\r\n        this.shiftRows(rows, i);\r\n        ++i;\r\n      }\r\n    }\r\n    this.setState({\r\n      score: score,\r\n      rows: rows,\r\n    });\r\n  }\r\n\r\n  getRotatedTetrisLeft(px, py, x, y, size) {\r\n    return {\r\n      x: y + px - py,\r\n      y: x + py - px,\r\n    }\r\n  }\r\n  shiftBlocks(blocks, x, y) {\r\n    for (let i = 0; i < blocks.length; ++i) {\r\n      blocks[i][0] += x;\r\n      blocks[i][1] += y;\r\n    }\r\n  }\r\n  unclipTetris(rows, blocks) { //Unclips the current tetromino\r\n    for (let i = 0; i < blocks.length; ++i) {\r\n      while (blocks[i][0] < 0) { //If clipped on top, shift down\r\n        this.shiftBlocks(blocks, 1, 0);\r\n      }\r\n      while (blocks[i][0] >= rows.length) { //If clipped below, shift up\r\n        this.shiftBlocks(blocks, -1, 0);\r\n      }\r\n      while (blocks[i][1] < 0) { //If clipped left, shift right\r\n        this.shiftBlocks(blocks, 0, 1);\r\n      }\r\n      while (blocks[i][1] >= rows[0].length) { //If clipped right, shift left\r\n        this.shiftBlocks(blocks, 0, -1);\r\n      }\r\n      while (!this.isEmpty(rows, blocks[i][0], blocks[i][1])) { //If clipped into other tetrominoes, shift up\r\n        this.shiftBlocks(blocks, -1, 0);\r\n      }\r\n    }\r\n  }\r\n  rotateTetris() {\r\n    const rows = this.state.rows.slice();\r\n    const tetris = Object.assign({}, this.state.tetris);\r\n\r\n    this.applyTetris(rows, tetris.blocks, 0);\r\n    for (let i = 0; i < tetris.blocks.length; ++i) {\r\n      let rotated = this.getRotatedTetrisLeft(tetris.blocks[tetris.blocks.length/2][0], tetris.blocks[tetris.blocks.length/2][1], tetris.blocks[i][0], tetris.blocks[i][1]);\r\n      tetris.blocks[i][0] = rotated.x;\r\n      tetris.blocks[i][1] = rotated.y;\r\n    }\r\n\r\n    this.unclipTetris(rows, tetris.blocks);\r\n    this.applyTetris(rows, tetris.blocks, tetris.value);\r\n\r\n    this.setState({\r\n      rows: rows,\r\n      tetris: tetris,\r\n    });\r\n  }\r\n\r\n  spawnTetris() {\r\n    const tetris = {\r\n      blocks: [[0, 3], [0, 4], [0, 5], [0, 6]],\r\n      value: getRndInteger(1, colors.length),\r\n    };\r\n    const rows = this.state.rows.slice();\r\n\r\n    if (this.canMove(rows, tetris.blocks, 0, 0) > 0) {\r\n      this.applyTetris(rows, tetris.blocks, tetris.value);\r\n      this.setState({\r\n        rows: rows,\r\n        tetris: tetris,\r\n      });\r\n    }\r\n    else {\r\n      this.endLoop();\r\n      //alert(\"lose\");\r\n    }\r\n  }\r\n\r\n  tick() {\r\n    if (this.state.tetris.blocks.length === 0) {\r\n      this.spawnTetris();\r\n    }\r\n    else {\r\n      this.moveTetris(1, 0);\r\n    }\r\n\r\n    this.onLoop();\r\n  }\r\n\r\n  handleKeyPress(event) {\r\n    if (!this.gameLoop)\r\n      return;\r\n    switch (event.key) {\r\n      case 'ArrowLeft': //Left\r\n        this.moveTetris(0, -1);\r\n        break;\r\n      case 'ArrowUp': //Up\r\n        this.rotateTetris(this.state.tetris);\r\n        break;\r\n      case 'ArrowRight': //Right\r\n        this.moveTetris(0, 1);\r\n        break;\r\n      case 'ArrowDown': //Down\r\n        this.moveTetris(1, 0);\r\n        break;\r\n      case ' ':\r\n        this.moveTetrisRecursive(1, 0);\r\n        break;\r\n      default:\r\n         break;\r\n    }\r\n  }\r\n\r\n  onSpeedChange(event) {\r\n    this.setState({\r\n      speed: event.target.value,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\" onKeyDown={(event) => {this.handleKeyPress(event)}}>\r\n          <ScoreCounter score={this.state.score}/>\r\n          <Board rows={this.state.rows}/>\r\n          <br/>\r\n          <button onClick={() => this.onNewGame()}>New Game</button>\r\n          <br/><br/>Speed:&nbsp;\r\n          <input type=\"range\" style={{direction:\"rtl\"}} value={this.state.speed} min=\"100\" max=\"500\" onChange={(event) => {this.onSpeedChange(event)}}></input>\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{}</div>\r\n          <ol>{}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}