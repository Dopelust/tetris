{"version":3,"sources":["index.js"],"names":["colors","arrOutOfBounds","arr","i","length","Square","props","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","style","background","value","Board","index","row","_this","this","map","squares","renderSquare","_this2","rows","renderRow","React","Component","Game","_this3","Object","C_Users_Rxtje_Desktop_React_tetris_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","C_Users_Rxtje_Desktop_React_tetris_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","C_Users_Rxtje_Desktop_React_tetris_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","tetris","blocks","_this4","j","setState","gameLoop","setInterval","tick","startLoop","clearInterval","endLoop","x","y","isRepeat","isEmpty","slice","assign","canMove","applyTetris","onMoveTetris","spawnTetris","min","max","Math","floor","random","moveTetris","event","console","log","key","moveTetrisRecursive","_this5","onKeyDown","handleKeyPress","onClick","onNewGame","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.271f04a0.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nconst colors = [\"white\", \"red\", \"green\", \"blue\", \"cyan\", \"magenta\", \"yellow\"];\r\n\r\nfunction getRndInteger(min, max) {\r\n  return Math.floor(Math.random() * (max - min) ) + min;\r\n}\r\nfunction arrOutOfBounds(arr, i) {\r\n  return i < 0 || i >= arr.length;\r\n}\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"square\" style={{background: colors[props.value]}}></button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(index) {\r\n    return <Square value={index}/>;\r\n  }\r\n  renderRow(row) {\r\n    return (\r\n      <div className=\"board-row\">\r\n        {row.map(squares => this.renderSquare(squares))}\r\n      </div>\r\n    );\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.rows.map(row => this.renderRow(row))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        rows: [\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        ],\r\n        tetris: {\r\n          blocks: [],\r\n          value: 0,\r\n        },\r\n    }\r\n  }\r\n\r\n  startLoop() {\r\n    const rows = this.state.rows;\r\n    for (let i = 0; i < rows.length; ++i) {\r\n      for (let j = 0; j < rows[i].length; ++j) {\r\n        rows[i][j] = 0;\r\n      }\r\n    }\r\n    this.setState({ rows: rows, });\r\n    this.gameLoop = setInterval(() => this.tick(), 100);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.startLoop();\r\n  };\r\n\r\n  endLoop() {\r\n    clearInterval(this.gameLoop);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.endLoop();\r\n  }\r\n\r\n  onNewGame() {\r\n    if (this.gameLoop) {\r\n      this.endLoop();\r\n    }\r\n    this.startLoop();\r\n  }\r\n\r\n  applyTetris(rows, blocks, value) {\r\n    for (let i = 0; i < blocks.length; ++i) {\r\n      rows[blocks[i][0]][blocks[i][1]] = value;\r\n    }\r\n  }\r\n\r\n  isEmpty(rows, x, y) {\r\n    return rows[x][y] === 0;\r\n  }\r\n  isRepeat(blocks, i, x, y) {\r\n    for (let j = 0; j < blocks.length; ++j) {\r\n      if (i === j)\r\n        continue;\r\n      if (blocks[i][0] + x === blocks[j][0] && blocks[i][1] + y === blocks[j][1])\r\n        return true;\r\n    }\r\n    return false;\r\n  }\r\n  canMove(rows, blocks, x, y) {\r\n    for (let i = 0; i < blocks.length; ++i) {\r\n      if (arrOutOfBounds(rows, blocks[i][0] + x))\r\n        return 0;\r\n      else if (arrOutOfBounds(rows[blocks[i][0] + x], blocks[i][1] + y))\r\n        return 2;\r\n      else if (!this.isRepeat(blocks, i, x, y) && !this.isEmpty(rows, blocks[i][0] + x, blocks[i][1] + y))\r\n        return -1;\r\n    }\r\n    return 1;\r\n  }\r\n\r\n  onMoveTetris(x, y) {\r\n    const rows = this.state.rows.slice();\r\n    const tetris = Object.assign({}, this.state.tetris);\r\n    switch (this.canMove(rows, tetris.blocks, x, y)) {\r\n      case 2:\r\n        y = 0; //fallthrough\r\n      case 1:\r\n        this.applyTetris(rows, tetris.blocks, 0);\r\n\r\n        for (let i = 0; i < tetris.blocks.length; ++i) {\r\n          tetris.blocks[i][0] += x;\r\n          tetris.blocks[i][1] += y;\r\n        }\r\n        this.applyTetris(rows, tetris.blocks, tetris.value);\r\n\r\n        this.setState({\r\n          rows: rows,\r\n          tetris: tetris,\r\n        });\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n  moveTetris(x, y) {\r\n    if (!this.onMoveTetris(x, y))\r\n      this.spawnTetris();\r\n  }\r\n  moveTetrisRecursive(x, y) {\r\n    while (this.onMoveTetris(x, y)) {}\r\n    this.spawnTetris();\r\n  }\r\n\r\n  spawnTetris() {\r\n    const tetris = {\r\n      blocks: [[0, 3], [0, 4], [0, 5], [0, 6]],\r\n      value: getRndInteger(1, colors.length),\r\n    };\r\n    const rows = this.state.rows.slice();\r\n\r\n    if (this.canMove(rows, tetris.blocks, 0, 0) > 0) {\r\n      this.applyTetris(rows, tetris.blocks, tetris.value);\r\n      this.setState({\r\n        rows: rows,\r\n        tetris: tetris,\r\n      });\r\n    }\r\n    else {\r\n      this.endLoop();\r\n      //alert(\"lose\");\r\n    }\r\n  }\r\n\r\n  tick() {\r\n    if (this.state.tetris.blocks.length === 0) {\r\n      this.spawnTetris();\r\n    }\r\n    else {\r\n      this.moveTetris(1, 0);\r\n    }\r\n  }\r\n\r\n  handleKeyPress(event) {\r\n    console.log(event.key);\r\n    switch (event.key) {\r\n      case 'ArrowLeft': //Left\r\n        this.moveTetris(0, -1);\r\n        break;\r\n      case 'ArrowUp': //Up\r\n        break;\r\n      case 'ArrowRight': //Right\r\n        this.moveTetris(0, 1);\r\n        break;\r\n      case 'ArrowDown': //Down\r\n        this.moveTetris(1, 0);\r\n        break;\r\n      case ' ':\r\n        this.moveTetrisRecursive(1, 0);\r\n        break;\r\n      default:\r\n         break;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\" onKeyDown={(event) => {this.handleKeyPress(event)}}>\r\n          <Board rows={this.state.rows}/>\r\n          <button onClick={() => this.onNewGame()}>New Game</button>\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{}</div>\r\n          <ol>{}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}