{"version":3,"sources":["index.js"],"names":["colors","tetromino","blocks","pivot","value","arrOutOfBounds","arr","i","length","Square","props","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","style","background","borderTop","t","borderBottom","b","borderLeft","l","borderRight","r","Board","rows","row","rowIndex","key","map","square","index","_this","this","renderRow","React","Component","ScoreCounter","_this2","Object","C_Users_Rxtje_Desktop_React_tetris_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","C_Users_Rxtje_Desktop_React_tetris_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","C_Users_Rxtje_Desktop_React_tetris_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","scoreCount","nextProps","_this3","lerp","setInterval","lerpScore","score","clearInterval","setState","toFixed","slice","Game","_this4","speed","tetris","clearRow","_this5","gameLoop","setTimeout","tick","clearTimeout","endLoop","clearBoard","onLoop","x","y","j","isRepeat","isEmpty","assign","canMove","applyTetris","shiftBlocks","onMoveTetris","checkBoard","spawnTetris","Array","fill","checkRow","shiftRows","px","py","size","rotated","getRotatedTetrisRight","unclipTetris","min","max","JSON","parse","stringify","Math","floor","random","moveTetris","event","rotateTetris","moveTetrisRecursive","onNewGame","target","_this6","onKeyDown","handleKeyPress","onClick","type","direction","onChange","onSpeedChange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.faaad1d5.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nconst colors = [\"white\", \"yellow\", \"cyan\", \"orange\", \"blue\", \"magenta\", \"green\", \"red\"];\r\nconst tetromino = [\r\n  {\r\n    blocks: [],\r\n    pivot: [],\r\n    value: 0,\r\n  },\r\n  {\r\n    blocks: [[0, 4], [0, 5], [1, 4], [1, 5]], //O\r\n    pivot: [0.5, -0.5],\r\n    value: 1,\r\n  },\r\n  {\r\n    blocks: [[0, 3], [0, 4], [0, 5], [0, 6]], //I\r\n    pivot: [0.5, 0.5],\r\n    value: 2,\r\n  },\r\n  {\r\n    blocks: [[0, 4], [1, 4], [2, 4], [2, 5]], //L>\r\n    pivot: [0, 0],\r\n    value: 3,\r\n  },\r\n  {\r\n    blocks: [[0, 5], [1, 5], [2, 5], [2, 4]], //L<\r\n    pivot: [0, 0],\r\n    value: 4,\r\n  },\r\n  {\r\n    blocks: [[0, 4], [1, 4], [2, 4], [1, 5]], //T\r\n    pivot: [0, 0],\r\n    value: 5,\r\n  },\r\n  {\r\n    blocks: [[0, 4], [1, 4], [1, 5], [2, 5]], //Z>\r\n    pivot: [0, 0],\r\n    value: 6,\r\n  },\r\n  {\r\n    blocks: [[0, 5], [1, 5], [1, 4], [2, 4]], //Z<\r\n    pivot: [0, 0],\r\n    value: 7,\r\n  },\r\n]\r\nfunction getRndInteger(min, max) {\r\n  return Math.floor(Math.random() * (max - min) ) + min;\r\n}\r\nfunction arrOutOfBounds(arr, i) {\r\n  return i < 0 || i >= arr.length;\r\n}\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"square\" style={{background: colors[props.value],\r\n      borderTop: props.t ? \" solid #eee\" : \"0px solid\",\r\n      borderBottom: props.b ? \" solid\" : \"0px solid\",\r\n      borderLeft: props.l ? \" solid #eee\" : \"0px solid\",\r\n      borderRight: props.r ? \" solid\" : \"0px solid\",}}></button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n  renderRow(rows, row, rowIndex) {\r\n    return (\r\n      <div className=\"board-row\" key={rowIndex}>\r\n        {row.map((square, index) => <Square l={index === 0 || (row[index] > 0 && row[index - 1] === 0)}\r\n                                            r={index === 9 || (row[index] > 0 && row[index + 1] === 0)}\r\n                                            t={rowIndex === 0 || (row[index] > 0 && rows[rowIndex - 1][index] === 0)}\r\n                                            b={rowIndex === 15 || (row[index] > 0 && rows[rowIndex + 1][index] === 0)}\r\n                                            value={square} key={index}/>)}\r\n      </div>\r\n    );\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.rows.map((row, rowIndex) => this.renderRow(this.props.rows, row, rowIndex))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst scorePadding = \"000000000\";\r\nclass ScoreCounter extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      scoreCount: 0,\r\n    }\r\n  }\r\n  componentWillReceiveProps(nextProps) {\r\n    if (!this.lerp)\r\n      this.lerp = setInterval(() => this.lerpScore(), 1000/60)\r\n  }\r\n  lerpScore() {\r\n    let score = this.state.scoreCount;\r\n\r\n    score += (this.props.score - score) / 3 + 1;\r\n    if (score >= this.props.score) {\r\n      score = this.props.score;\r\n      clearInterval(this.lerp);\r\n      this.lerp = null;\r\n    }\r\n\r\n    this.setState({ scoreCount:score });\r\n  }\r\n  render() {\r\n    return (\r\n        <div className=\"score\">\r\n          {(scorePadding + this.state.scoreCount.toFixed(0)).slice(-scorePadding.length)}\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        score: 0,\r\n        speed: 300,\r\n        rows: [\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        ],\r\n        tetris: {\r\n          blocks: [],\r\n          value: 0,\r\n        },\r\n    }\r\n  }\r\n\r\n  clearRow(row) {\r\n    for (let i = 0; i < row.length; ++i) {\r\n      row[i] = 0;\r\n    }\r\n  }\r\n  clearBoard() {\r\n    const rows = this.state.rows;\r\n    for (let i = 0; i < rows.length; ++i) {\r\n      this.clearRow(rows[i]);\r\n    }\r\n    const tetris = this.state.tetris;\r\n    tetris.blocks = [];\r\n    this.setState({ rows: rows, tetris: tetris, score: 0});\r\n  }\r\n\r\n  onLoop() {\r\n    this.gameLoop = setTimeout(() => this.tick(), this.state.speed);\r\n  }\r\n  endLoop() {\r\n    if (this.gameLoop) {\r\n      clearTimeout(this.gameLoop);\r\n      this.gameLoop = null;\r\n    }\r\n  }\r\n  overwriteLoop() {\r\n    this.endLoop();\r\n    this.tick();\r\n  }\r\n  componentDidMount() {\r\n    this.clearBoard();\r\n    this.onLoop();\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    this.endLoop();\r\n  }\r\n\r\n  onNewGame() {\r\n    this.endLoop();\r\n    this.clearBoard();\r\n    this.onLoop();\r\n  }\r\n\r\n  applyTetris(rows, blocks, value) {\r\n    for (let i = 0; i < blocks.length; ++i) {\r\n      if (!arrOutOfBounds(rows, blocks[i][0]) && !arrOutOfBounds(rows[blocks[i][0]], blocks[i][1]))\r\n              rows[blocks[i][0]][blocks[i][1]] = value;\r\n    }\r\n  }\r\n\r\n  isEmpty(rows, x, y) {\r\n    return rows[x][y] === 0;\r\n  }\r\n  isRepeat(blocks, i, x, y) {\r\n    for (let j = 0; j < blocks.length; ++j) {\r\n      if (i === j)\r\n        continue;\r\n      if (blocks[i][0] + x === blocks[j][0] && blocks[i][1] + y === blocks[j][1])\r\n        return true;\r\n    }\r\n    return false;\r\n  }\r\n  canMove(rows, blocks, x, y) {\r\n    for (let i = 0; i < blocks.length; ++i) {\r\n      if (arrOutOfBounds(rows, blocks[i][0] + x))\r\n        return 0;\r\n      else if (arrOutOfBounds(rows[blocks[i][0] + x], blocks[i][1] + y))\r\n        return 2;\r\n      else if (!this.isRepeat(blocks, i, x, y) && !this.isEmpty(rows, blocks[i][0] + x, blocks[i][1] + y))\r\n        return y === 0 ? -1 : 2;\r\n    }\r\n    return 1;\r\n  }\r\n\r\n  onMoveTetris(x, y) {\r\n    const rows = this.state.rows.slice();\r\n    const tetris = Object.assign({}, this.state.tetris);\r\n    switch (this.canMove(rows, tetris.blocks, x, y)) {\r\n      case 2:\r\n        y = 0; //fallthrough\r\n      case 1:\r\n        this.applyTetris(rows, tetris.blocks, 0);\r\n        this.shiftBlocks(tetris.blocks, x, y);\r\n        this.applyTetris(rows, tetris.blocks, tetris.value);\r\n\r\n        this.setState({\r\n          rows: rows,\r\n          tetris: tetris,\r\n        });\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n  moveTetris(x, y) {\r\n    if (!this.onMoveTetris(x, y)) {\r\n      this.checkBoard();\r\n      this.spawnTetris();\r\n    }\r\n  }\r\n  moveTetrisRecursive(x, y) {\r\n    while (this.onMoveTetris(x, y)) {}\r\n  }\r\n\r\n  checkRow(row) {\r\n    for (let i = 0; i < row.length; ++i) {\r\n      if (row[i] === 0)\r\n        return false;\r\n    }\r\n    return true;\r\n  }\r\n  shiftRows(rows, i) {\r\n    for (let j = i; j >= 0; --j) {\r\n      rows[j] = j > 0 ? rows[j - 1].slice() : new Array(10).fill(0);\r\n    }\r\n  }\r\n\r\n  checkBoard() {\r\n    const rows = this.state.rows.slice();\r\n    let score = this.state.score;\r\n    for (let i = rows.length - 1; i >= 0; --i) {\r\n      if (this.checkRow(rows[i])) {\r\n        score += 1000;\r\n        this.shiftRows(rows, i);\r\n        ++i;\r\n      }\r\n    }\r\n    this.setState({\r\n      score: score,\r\n      rows: rows,\r\n    });\r\n  }\r\n\r\n  getRotatedTetrisLeft(px, py, x, y, size) {\r\n    let tx = x - px;\r\n    let ty = y - py;\r\n    return {\r\n      x: -1 * ty + px,\r\n      y: 1 * tx + py,\r\n    }\r\n  }\r\n  getRotatedTetrisRight(px, py, x, y, size) {\r\n    let tx = x - px;\r\n    let ty = y - py;\r\n    return {\r\n      x: 1 * ty + px,\r\n      y: -1 * tx + py,\r\n    }\r\n  }\r\n\r\n  shiftBlocks(blocks, x, y) {\r\n    for (let i = 0; i < blocks.length; ++i) {\r\n      blocks[i][0] += x;\r\n      blocks[i][1] += y;\r\n    }\r\n  }\r\n  unclipTetris(rows, blocks) { //Unclips the current tetromino\r\n    for (let i = 0; i < blocks.length; ++i) {\r\n      while (blocks[i][0] < 0) { //If clipped on top, shift down\r\n        this.shiftBlocks(blocks, 1, 0);\r\n      }\r\n      while (blocks[i][0] >= rows.length) { //If clipped below, shift up\r\n        this.shiftBlocks(blocks, -1, 0);\r\n      }\r\n      while (blocks[i][1] < 0) { //If clipped left, shift right\r\n        this.shiftBlocks(blocks, 0, 1);\r\n      }\r\n      while (blocks[i][1] >= rows[0].length) { //If clipped right, shift left\r\n        this.shiftBlocks(blocks, 0, -1);\r\n      }\r\n      while (!this.isEmpty(rows, blocks[i][0], blocks[i][1])) { //If clipped into other tetrominoes, shift up\r\n        this.shiftBlocks(blocks, -1, 0);\r\n      }\r\n    }\r\n  }\r\n  rotateTetris() {\r\n    const rows = this.state.rows.slice();\r\n    const tetris = Object.assign({}, this.state.tetris);\r\n\r\n    this.applyTetris(rows, tetris.blocks, 0);\r\n    let px = tetris.blocks[tetris.blocks.length/2 - 1][0] + tetris.pivot[0],\r\n     py = tetris.blocks[tetris.blocks.length/2 - 1][1] + tetris.pivot[1];\r\n    for (let i = 0; i < tetris.blocks.length; ++i) {\r\n      let rotated = this.getRotatedTetrisRight(px, py, tetris.blocks[i][0], tetris.blocks[i][1]);\r\n      tetris.blocks[i][0] = rotated.x;\r\n      tetris.blocks[i][1] = rotated.y;\r\n    }\r\n    let rotated = this.getRotatedTetrisRight(0, 0, tetris.pivot[0], tetris.pivot[1]);\r\n    tetris.pivot[0] = rotated.x;\r\n    tetris.pivot[1] = rotated.y;\r\n\r\n    this.unclipTetris(rows, tetris.blocks);\r\n    this.applyTetris(rows, tetris.blocks, tetris.value);\r\n\r\n    this.setState({\r\n      rows: rows,\r\n      tetris: tetris\r\n    });\r\n  }\r\n\r\n  spawnTetris() {\r\n    const tetris = JSON.parse(JSON.stringify(tetromino))[getRndInteger(1, tetromino.length)];\r\n    const rows = this.state.rows.slice();\r\n    if (this.canMove(rows, tetris.blocks, 0, 0) > 0) {\r\n      this.applyTetris(rows, tetris.blocks, tetris.value);\r\n      this.setState({\r\n        rows: rows,\r\n        tetris: tetris,\r\n      });\r\n    }\r\n    else {\r\n      this.endLoop();\r\n      //alert(\"lose\");\r\n    }\r\n  }\r\n\r\n  tick() {\r\n    if (this.state.tetris.blocks.length === 0) {\r\n      this.spawnTetris();\r\n    }\r\n    else {\r\n      this.moveTetris(1, 0);\r\n    }\r\n\r\n    this.onLoop();\r\n  }\r\n\r\n  handleKeyPress(event) {\r\n    //if (!this.gameLoop)\r\n      //return;\r\n    switch (event.key) {\r\n      case 'ArrowLeft': //Left\r\n        this.moveTetris(0, -1);\r\n        break;\r\n      case 'ArrowUp': //Up\r\n        this.rotateTetris(this.state.tetris);\r\n        break;\r\n      case 'ArrowRight': //Right\r\n        this.moveTetris(0, 1);\r\n        break;\r\n      case 'ArrowDown': //Down\r\n        this.moveTetris(1, 0);\r\n        break;\r\n      case ' ':\r\n        this.moveTetrisRecursive(1, 0);\r\n        break;\r\n      case 'r':\r\n        this.onNewGame();\r\n        break;\r\n      case 's':\r\n        if (this.gameLoop) {\r\n          this.endLoop();\r\n        }\r\n        else {\r\n          this.onLoop();\r\n        }\r\n        break;\r\n      default:\r\n         break;\r\n    }\r\n  }\r\n\r\n  onSpeedChange(event) {\r\n    this.setState({\r\n      speed: event.target.value,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\" onKeyDown={(event) => {this.handleKeyPress(event)}}>\r\n          <ScoreCounter score={this.state.score}/>\r\n          <Board rows={this.state.rows}/>\r\n          <br/>\r\n          <button className=\"keycapButton\" onClick={() => this.onNewGame()}>R</button>  to Reset\r\n          <br/><br/><br/>Speed:&nbsp;\r\n          <input type=\"range\" style={{direction:\"rtl\"}} value={this.state.speed} min=\"100\" max=\"500\" onChange={(event) => {this.onSpeedChange(event)}}></input>\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{}</div>\r\n          <ol>{}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}